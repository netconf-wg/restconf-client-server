<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     consensus="true"
     category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-restconf-client-server-latest" >
    <front>
      <title>RESTCONF Client and Server Models</title>
      <author initials="K." surname="Watsen" fullname="Kent Watsen">
        <organization>Watsen Networks</organization>
        <address>
          <email>kent+ietf@watsen.net</email>
        </address>
      </author>
      <date/>
      <area>Operations</area>
      <workgroup>NETCONF Working Group</workgroup>
      <abstract>
        <t>This document defines two YANG modules,
          one module to configure a RESTCONF client and the other module to
          configure a RESTCONF server.  Both modules support the TLS transport
          protocol with both standard RESTCONF and RESTCONF Call Home connections.</t>
      </abstract>
      <note title="Editorial Note (To be removed by RFC Editor)">
        <t>This draft contains placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  No other RFC Editor
          instructions are specified elsewhere in this document.</t>
        <t>Artwork in this document contains shorthand references to drafts in
          progress.  Please apply the following replacements (note: not all may be present):
          <list style="symbols">
            <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
            <t><spanx style="verb">BBBB</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-trust-anchors</t>
            <t><spanx style="verb">CCCC</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-keystore</t>
            <t><spanx style="verb">DDDD</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client-server</t>
            <t><spanx style="verb">EEEE</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-ssh-client-server</t>
            <t><spanx style="verb">FFFF</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-tls-client-server</t>
            <t><spanx style="verb">GGGG</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-http-client-server</t>
            <t><spanx style="verb">HHHH</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-netconf-client-server</t>
            <t><spanx style="verb">IIII</spanx> --&gt; the assigned RFC value for this draft</t>
          </list>
        </t>
        <t>Artwork in this document contains placeholder values for the date of publication of this
        draft.  Please apply the following replacement:
          <list style="symbols">
            <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
          </list>
        </t>
        <t>The following Appendix section is to be removed prior to publication:
          <list style="symbols">
            <t><xref target="change-log"/>.  Change Log</t>
          </list>
        </t>
      </note>
    </front>
    <middle>

      <section title="Introduction">

        <t>This document defines two YANG <xref target="RFC7950"/> modules,
          one module to configure a RESTCONF client and the other module to
          configure a RESTCONF server <xref target="RFC8040"/>.
          Both modules support the TLS <xref target="RFC8446"/> transport
          protocol with both standard RESTCONF and RESTCONF Call Home connections
          <xref target="RFC8071"/>.</t>

INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

        <section title="Adherence to the NMDA">
          <t>This document is compliant with the Network Management Datastore
            Architecture (NMDA) <xref target="RFC8342"/>.  For instance, as
            described in <xref target="I-D.ietf-netconf-trust-anchors"/> and
            <xref target="I-D.ietf-netconf-keystore"/>, trust anchors and keys
            installed during manufacturing are expected to appear
            in &lt;operational&gt;.</t>
        </section>

        <section title="Conventions">
          <t>Various examples used in this document use a placeholder
            value for binary data that has been base64 encoded (e.g.,
            "BASE64VALUE=").  This placeholder value is used as real
            base64 encoded structures are often many lines long and
            hence distracting to the example being presented.</t>
        </section>

      </section>

      <section title="The &quot;ietf-restconf-client&quot; Module">

        <t>The RESTCONF client model presented in this section supports
        both clients initiating connections to servers, as well as
        clients listening for connections from servers calling home.</t>

        <t>YANG feature statements are used to enable implementations to
        advertise which potentially uncommon parts of the model the
        RESTCONF client supports.</t>

        <section title="Data Model Overview" anchor="restconf-client-tree">

          <t>This section provides an overview of the "ietf-restconf-client"
            module in terms of its features and groupings.</t>

          <section title="Features" anchor="client-features" toc="exclude">
            <t>The following diagram lists all the "feature" statements
              defined in the "ietf-restconf-client" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
Features:
  +-- https-initiate
  +-- http-listen
  +-- https-listen
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>

          <section title="Groupings" toc="exclude">
            <t>The "ietf-restconf-client" module defines the following "grouping" statements:</t>
            <ul spacing="compact">
              <li>restconf-client-grouping</li>
              <li>restconf-client-initiate-stack-grouping</li>
              <li>restconf-client-listen-stack-grouping</li>
              <li>restconf-client-app-grouping</li>
            </ul>
            <t>Each of these groupings are presented in the following subsections.</t>

            <section title="The &quot;restconf-client-grouping&quot; Grouping" anchor="restconf-client-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-client-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-client-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>This grouping does not define any nodes, but is maintained so
                  that downstream modules can augment nodes into it if needed.</li>
                <li>The "restconf-client-grouping" defines, if it can be called
                  that, the configuration for just "RESTCONF" part of a protocol
                  stack.  It does not, for instance, define any configuration for
                  the "TCP", "TLS", or "HTTP" protocol layers (for that, see
                  <xref target="restconf-client-initiate-stack-grouping"/>
                  and <xref target="restconf-client-listen-stack-grouping"/>).</li>
              </ul>
            </section>

            <section title="The &quot;restconf-client-initiate-stack-grouping&quot; Grouping" anchor="restconf-client-initiate-stack-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-client-initiate-stack-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-client-initiate-stack-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-client-initiate-stack-grouping" defines the
                  configuration for a full RESTCONF protocol stack, for RESTCONF
                  clients that initiate connections to RESTCONF servers, as
                  opposed to receiving call-home <xref target="RFC8071"/>
                  connections.</li>
                <li>The "transport" choice node enables transport options to be
                  configured.  This document only defines an "https" option,
                  but other options MAY be augmented in.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "tcp-client-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-tcp-client-server"/>.</li>
                    <li>The "tls-client-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-tls-client-server"/>.</li>
                    <li>The "http-client-grouping" grouping is discussed in
                      <relref section="2.1.2.2" target="I-D.ietf-netconf-http-client-server"/>.</li>
                    <li>The "restconf-client-grouping" grouping is discussed in
                      <xref target="restconf-client-grouping"/> in this document.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;restconf-client-listen-stack-grouping&quot; Grouping" anchor="restconf-client-listen-stack-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-client-listen-stack-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-client-listen-stack-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-client-listen-stack-grouping" defines the
                  configuration for a full RESTCONF protocol stack, for RESTCONF
                  clients that receive call-home <xref target="RFC8071"/>
                  connections from RESTCONF servers.</li>
                <li>The "transport" choice node enables both the HTTP and
                  HTTPS transports to be configured, with each option
                  enabled by a "feature" statement.  Note that RESTCONF
                  requires HTTPS, the HTTP option is provided to support
                  cases where a TLS-terminator is deployed in front of
                  the RESTCONF-client.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "tcp-server-grouping" grouping is discussed in
                      <relref section="4.1.2.1" target="I-D.ietf-netconf-tcp-client-server"/>.</li>
                    <li>The "tls-client-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-tls-client-server"/>.</li>
                    <li>The "http-client-grouping" grouping is discussed in
                      <relref section="2.1.2.2" target="I-D.ietf-netconf-http-client-server"/>.</li>
                    <li>The "restconf-client-grouping" grouping is discussed in
                      <xref target="restconf-client-grouping"/> in this document.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;restconf-client-app-grouping&quot; Grouping" anchor="restconf-client-app-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-client-app-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-client-app-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-client-app-grouping" defines the configuration
                  for a RESTCONF client that supports both initiating connections
                  to RESTCONF servers as well as receiving call-home connections from
                  RESTCONF servers.</li>
                <li>Both the "initiate" and "listen" subtrees must be enabled by
                  "feature" statements.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "restconf-client-initiate-stack-grouping" grouping is discussed in
                      <xref target="restconf-client-initiate-stack-grouping"/> in this document.</li>
                    <li>The "restconf-client-listen-stack-grouping" grouping is discussed in
                      <xref target="restconf-client-listen-stack-grouping"/> in this document.</li>
                  </ul>
                </li>
              </ul>
            </section>
          </section>

          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the protocol-accessible nodes
              defined in the "ietf-restconf-client" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-restconf-client-tree-no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
              <li>For the "ietf-restconf-client" module, the protocol-accessible nodes
                are an instance of the "restconf-client-app-grouping" discussed in
                <xref target="restconf-client-app-grouping"/> grouping.</li>
              <li>The reason for why "restconf-client-app-grouping" exists separate from
                the protocol-accessible nodes definition is so as to enable
                instances of restconf-client-app-grouping to be instantiated in other
                locations, as may be needed or desired by some modules.</li>
            </ul>
          </section>
        </section>

        <section title="Example Usage">
          <t>The following example illustrates configuring a RESTCONF
          client to initiate connections, as well as to listen for call-home
          connections.</t>
          <t>This example is consistent with the examples presented in
            <relref section="2.2" target="I-D.ietf-netconf-trust-anchors"/> and
            <relref section="2.2" target="I-D.ietf-netconf-keystore"/>.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-restconf-client.xml)
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="YANG Module" anchor="ietf-restconf-client-module">
          <t>This YANG module has normative references to <xref target="RFC6991"/>,
          <xref target="RFC8040"/>, and <xref target="RFC8071"/>,
          <xref target="I-D.ietf-netconf-tcp-client-server"/>,
          <xref target="I-D.ietf-netconf-tls-client-server"/>, and
          <xref target="I-D.ietf-netconf-http-client-server"/>.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "ietf-restconf-client@YYYY-MM-DD.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-restconf-client@YYYY-MM-DD.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title="The &quot;ietf-restconf-server&quot; Module">

        <t>The RESTCONF server model presented in this section supports
        both listening for connections as well as initiating call-home
        connections.</t>

        <t>YANG feature statements are used to enable implementations to
        advertise which potentially uncommon parts of the model the
        RESTCONF server supports.</t>

        <section title="Data Model Overview" anchor="restconf-server-tree">

          <t>This section provides an overview of the "ietf-restconf-server"
            module in terms of its features and groupings.</t>

          <section title="Features" anchor="server-features" toc="exclude">
            <t>The following diagram lists all the "feature" statements
              defined in the "ietf-restconf-server" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
Features:
  +-- http-listen
  +-- https-listen
  +-- https-call-home
]]></artwork>
              </figure>
            </t>
            <aside>
              <t>The diagram above uses syntax that is similar to but not
                defined in <xref target="RFC8340"/>.</t>
            </aside>
          </section>

          <section title="Groupings" toc="exclude">
            <t>The "ietf-restconf-server" module defines the following "grouping" statements:</t>
            <ul spacing="compact">
              <li>restconf-server-grouping</li>
              <li>restconf-server-listen-stack-grouping</li>
              <li>restconf-server-callhome-stack-grouping</li>
              <li>restconf-server-app-grouping</li>
            </ul>
            <t>Each of these groupings are presented in the following subsections.</t>

            <section title="The &quot;restconf-server-grouping&quot; Grouping" anchor="restconf-server-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-server-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-server-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-server-grouping" defines the configuration for just
                  "RESTCONF" part of a protocol stack.  It does not, for instance,
                  define any configuration for the "TCP", "TLS", or "HTTP" protocol layers
                  (for that, see <xref target="restconf-server-listen-stack-grouping"/>
                  and <xref target="restconf-server-callhome-stack-grouping"/>).</li>
                <li>The "client-identity-mappings" node, which must be enabled by
                  "feature" statements, defines a mapping from certificate fields
                  to RESTCONF user names.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "cert-to-name" grouping is discussed in
                      <relref section="4.1" target="RFC7407"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;restconf-server-listen-stack-grouping&quot; Grouping" anchor="restconf-server-listen-stack-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-server-listen-stack-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-server-listen-stack-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-server-listen-stack-grouping" defines the
                  configuration for a full RESTCONF protocol stack for RESTCONF
                  servers that listen for standard connections from RESTCONF clients,
                  as opposed to initiating call-home <xref target="RFC8071"/> connections.</li>
                <li>The "transport" choice node enables both the HTTP and HTTPS
                  transports to be configured, with each option enabled by a
                  "feature" statement. The HTTP option is provided to support
                  cases where a TLS-terminator is deployed in front of
                  the RESTCONF-server.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "tcp-server-grouping" grouping is discussed in
                      <relref section="4.1.2.1" target="I-D.ietf-netconf-tcp-client-server"/>.</li>
                    <li>The "tls-server-grouping" grouping is discussed in
                      <relref section="4.1.2.1" target="I-D.ietf-netconf-tls-client-server"/>.</li>
                    <li>The "http-server-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-http-client-server"/>.</li>
                    <li>The "restconf-server-grouping" is discussed in <xref target="restconf-server-grouping"/>
                      of this document.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;restconf-server-callhome-stack-grouping&quot; Grouping" anchor="restconf-server-callhome-stack-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-server-callhome-stack-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-server-callhome-stack-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-server-callhome-stack-grouping" defines the
                  configuration for a full RESTCONF protocol stack, for RESTCONF
                  servers that initiate call-home <xref target="RFC8071"/> connections
                  to RESTCONF clients.</li>
                <li>The "transport" choice node enables transport options to be
                  configured. This document only defines an "https" option, but
                  other options MAY be augmented in.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "tcp-client-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-tcp-client-server"/>.</li>
                    <li>The "tls-server-grouping" grouping is discussed in
                      <relref section="4.1.2.1" target="I-D.ietf-netconf-tls-client-server"/>.</li>
                    <li>The "http-server-grouping" grouping is discussed in
                      <relref section="3.1.2.1" target="I-D.ietf-netconf-http-client-server"/>.</li>
                    <li>The "restconf-server-grouping" is discussed in <xref target="restconf-server-grouping"/>
                      of this document.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;restconf-server-app-grouping&quot; Grouping" anchor="restconf-server-app-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "restconf-server-app-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-restconf-server-app-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "restconf-server-app-grouping" defines the configuration
                  for a RESTCONF server that supports both listening for connections
                  from RESTCONF clients as well as initiating call-home connections to
                  RESTCONF clients.</li>
                <li>Both the "listen" and "call-home" subtrees must be enabled by
                  "feature" statements.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "restconf-server-listen-stack-grouping" grouping is discussed in
                      <xref target="restconf-server-listen-stack-grouping"/> in this document.</li>
                    <li>The "restconf-server-callhome-stack-grouping" grouping is discussed in
                      <xref target="restconf-server-callhome-stack-grouping"/> in this document.</li>
                  </ul>
                </li>
              </ul>
            </section>
          </section>

          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The following tree diagram <xref target="RFC8340"/> lists all the protocol-accessible nodes
              defined in the "ietf-restconf-server" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-restconf-server-tree-no-expand.txt)
]]></artwork>
              </figure>
            </t>
            <t>Comments:</t>
            <ul>
              <li>Protocol-accessible nodes are those nodes that are accessible
                when the module is "implemented", as described in <relref
                section="5.6.5" target="RFC7950"/>.</li>
              <li>For the "ietf-restconf-server" module, the protocol-accessible nodes
                are an instance of the "restconf-server-app-grouping" discussed in
                <xref target="restconf-server-app-grouping"/> grouping.</li>
              <li>The reason for why "restconf-server-app-grouping" exists separate from
                the protocol-accessible nodes definition is so as to enable
                instances of restconf-server-app-grouping to be instantiated in other
                locations, as may be needed or desired by some modules.</li>
            </ul>
          </section>
        </section>

        <section title="Example Usage">
          <t>The following example illustrates configuring a RESTCONF server
          to listen for RESTCONF client connections, as well as configuring
          call-home to one RESTCONF client.</t>
          <t>This example is consistent with the examples presented in
            <relref section="2.2" target="I-D.ietf-netconf-trust-anchors"/> and
            <relref section="2.2" target="I-D.ietf-netconf-keystore"/>.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-restconf-server.xml)
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="YANG Module" anchor="ietf-restconf-server-module">
          <t>This YANG module has normative references to <xref target="RFC6991"/>,
          <xref target="RFC7407"/>, <xref target="RFC8040"/>, <xref target="RFC8071"/>,
          <xref target="I-D.ietf-netconf-tcp-client-server"/>,
          <xref target="I-D.ietf-netconf-tls-client-server"/>, and
          <xref target="I-D.ietf-netconf-http-client-server"/>.</t>
          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "ietf-restconf-server@YYYY-MM-DD.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-restconf-server@YYYY-MM-DD.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title="Security Considerations">

        <section title="The &quot;ietf-restconf-client&quot; YANG Module">
          <t>The "ietf-restconf-client" YANG module defines data nodes
            that are designed to be accessed via YANG based management
            protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
            <xref target="RFC8040"/>.  Both of these protocols have
            mandatory-to-implement secure transport layers (e.g., SSH, TLS)
            with mutual authentication.</t>
  
          <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
            provides the means to restrict access for particular users to a
            pre-configured subset of all available protocol operations and
            content.</t>
  
          <t>None of the readable data nodes in this YANG module are
            considered sensitive or vulnerable in network environments.
            The NACM "default-deny-all" extension has not been set for
            any data nodes defined in this module.</t>
  
          <t>None of the writable data nodes in this YANG module are
            considered sensitive or vulnerable in network environments.
            The NACM "default-deny-write" extension has not been set for
            any data nodes defined in this module.</t>
  
          <t>This module does not define any RPCs, actions, or notifications,
            and thus the security consideration for such is not provided here.</t>

          <t>Please be aware that this module uses groupings defined in
            other RFCs that define data nodes that do set the NACM "default-deny-all"
            and "default-deny-write" extensions.</t>
        </section>

        <section title="The &quot;ietf-restconf-server&quot; YANG Module">
          <t>The "ietf-restconf-server" YANG module defines data nodes
            that are designed to be accessed via YANG based management
            protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
            <xref target="RFC8040"/>.  Both of these protocols have
            mandatory-to-implement secure transport layers (e.g., SSH, TLS)
            with mutual authentication.</t>
  
          <t>The NETCONF access control model (NACM) <xref target="RFC8341"/>
            provides the means to restrict access for particular users to a
            pre-configured subset of all available protocol operations and
            content.</t>
  
          <t>None of the readable data nodes in this YANG module are
            considered sensitive or vulnerable in network environments.
            The NACM "default-deny-all" extension has not been set for
            any data nodes defined in this module.</t>
  
          <t>None of the writable data nodes in this YANG module are
            considered sensitive or vulnerable in network environments.
            The NACM "default-deny-write" extension has not been set for
            any data nodes defined in this module.</t>
  
          <t>This module does not define any RPCs, actions, or notifications,
            and thus the security consideration for such is not provided here.</t>

          <t>Please be aware that this module uses groupings defined in
            other RFCs that define data nodes that do set the NACM "default-deny-all"
            and "default-deny-write" extensions.</t>
        </section>
      </section>

      <section title="IANA Considerations">
        <section title='The "IETF XML" Registry'>
          <t>This document registers two URIs in the "ns" subregistry of the IETF XML
          Registry <xref target="RFC3688"/>.  Following the format in
          <xref target="RFC3688"/>, the following registrations are
          requested:</t>
          <t>
            <figure>
                <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-restconf-client
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-restconf-server
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.
</artwork>
            </figure>
          </t>
        </section>

        <section title='The "YANG Module Names" Registry'>
          <t>This document registers two YANG modules in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          following registrations are requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-restconf-client
   namespace:    urn:ietf:params:xml:ns:yang:ietf-restconf-client
   prefix:       ncc
   reference:    RFC IIII

   name:         ietf-restconf-server
   namespace:    urn:ietf:params:xml:ns:yang:ietf-restconf-server
   prefix:       ncs
   reference:    RFC IIII
]]></artwork>
            </figure>
          </t>
        </section>
      </section>

  </middle>
  <back>

    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.6020.xml"?>
      <?rfc include="reference.RFC.6991.xml"?>
      <?rfc include="reference.RFC.7407.xml"?>
      <?rfc include="reference.RFC.7950.xml"?>
      <?rfc include="reference.RFC.8040.xml"?>
      <?rfc include="reference.RFC.8071.xml"?>
      <?rfc include="reference.RFC.8174.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.3688.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.8340.xml"?>
      <?rfc include="reference.RFC.8341.xml"?>
      <?rfc include="reference.RFC.8342.xml"?>
      <?rfc include="reference.RFC.8446.xml"?>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>

    </references>

    <section title="Change Log" anchor="change-log" removeInRFC="true">
      <section title="00 to 01">
        <t>
          <list style="symbols">
            <t>Renamed "keychain" to "keystore".</t>
          </list>
        </t>
      </section>
      <section title="01 to 02">
        <t>
          <list style="symbols">
            <t>Filled in previously missing 'ietf-restconf-client' module.</t>
            <t>Updated the ietf-restconf-server module to accommodate new
            grouping 'ietf-tls-server-grouping'.</t>
          </list>
        </t>
      </section>
      <section title="02 to 03">
        <t>
          <list style="symbols">
            <t>Refined use of tls-client-grouping to add a must statement
               indicating that the TLS client must specify a client-certificate.</t>
            <t>Changed restconf-client??? to be a grouping (not a container).</t>
          </list>
        </t>
      </section>
      <section title="03 to 04">
        <t>
          <list style="symbols">
            <t>Added RFC 8174 to Requirements Language Section.</t>
            <t>Replaced refine statement in ietf-restconf-client
               to add a mandatory true.</t>
            <t>Added refine statement in ietf-restconf-server
               to add a must statement.</t>
            <t>Now there are containers and groupings, for both the
               client and server models.</t>
            <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
            <t>Updated examples to inline key and certificates (no longer 
               a leafref to keystore)</t>
          </list>
        </t>
      </section>
      <section title="04 to 05">
        <t>
          <list style="symbols">
            <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
            <t>Updated examples to inline key and certificates (no longer
               a leafref to keystore)</t>
          </list>
        </t>
      </section>
      <section title="05 to 06">
        <t>
          <list style="symbols">
            <t>Fixed change log missing section issue.</t>
            <t>Updated examples to match latest updates to the crypto-types,
               trust-anchors, and keystore drafts.</t>
            <t>Reduced line length of the YANG modules to fit within 69 columns.</t>
          </list>
        </t>
      </section>
      <section title="06 to 07">
        <t>
          <list style="symbols">
            <t>removed "idle-timeout" from "persistent" connection config.</t>
            <t>Added "random-selection" for reconnection-strategy's "starts-with" enum.</t>
            <t>Replaced "connection-type" choice default (persistent) with "mandatory true".</t>
            <t>Reduced the periodic-connection's "idle-timeout" from 5 to 2 minutes.</t>
            <t>Replaced reconnect-timeout with period/anchor-time combo.</t>
          </list>
        </t>
      </section>
      <section title="07 to 08">
        <t>
          <list style="symbols">
            <t>Modified examples to be compatible with new crypto-types algs</t>
          </list>
        </t>
      </section>
      <section title="08 to 09">
        <t>
          <list style="symbols">
            <t>Corrected use of "mandatory true" for "address" leafs.</t>
            <t>Updated examples to reflect update to groupings defined in the keystore draft.</t>
            <t>Updated to use groupings defined in new TCP and HTTP drafts.</t>
            <t>Updated copyright date, boilerplate template, affiliation, and folding algorithm.</t>
          </list>
        </t>
      </section>
      <section title="09 to 10">
        <t>
          <list style="symbols">
            <t>Reformatted YANG modules.</t>
          </list>
        </t>
      </section>
      <section title="10 to 11">
        <t>
          <list style="symbols">
              <t>Adjusted for the top-level "demux container" added to groupings
                imported from other modules.</t>
              <t>Added "must" expressions to ensure that keepalives are not configured
                for "periodic" connections.</t>
              <t>Updated the boilerplate text in module-level "description" statement
                to match copyeditor convention.</t>
              <t>Moved "expanded" tree diagrams to the Appendix.</t>
          </list>
        </t>
      </section>
      <section title="11 to 12">
        <t>
          <list style="symbols">
            <t>Removed the 'must' statement limiting keepalives in periodic
              connections.</t>
            <t>Updated models and examples to reflect removal of the "demux"
              containers in the imported models.</t>
            <t>Updated the "periodic-connnection" description statements to
              better describe behavior when connections are not closed
              gracefully.</t>
            <t>Updated text to better reference where certain examples come from
              (e.g., which Section in which draft).</t>
            <t>In the server model, commented out the "must 'pinned-ca-certs or 
              pinned-client-certs'" statement to reflect change made in the
              TLS draft whereby the trust anchors MAY be defined externally.</t>
            <t>Replaced the 'listen', 'initiate', and 'call-home' features
              with boolean expressions.</t>
          </list>
        </t>
      </section>
      <section title="12 to 13">
        <t>
          <list style="symbols">
            <t>Updated to reflect changes in trust-anchors drafts
              (e.g., s/trust-anchors/truststore/g + s/pinned.//)</t>
            <t>In ietf-restconf-server, Added 'http-listen' (not https-listen) choice, to support
              case when server is behind a TLS-terminator.</t>
            <t>Refactored server module to be more like other 'server' models.  If folks like it, will
              also apply to the client model, as well as to both the netconf client/server models.  Now
              the 'restconf-server-grouping' is just the RC-specific bits (i.e., the "demux" container
              minus the container), 'restconf-server-[listen|callhome]-stack-grouping' is the protocol
              stack for a single connection, and 'restconf-server-app-grouping' is effectively what
              was before (both listen+callhome for many inbound/outbound endpoints).</t>
          </list>
        </t>
      </section>
      <section title="13 to 14">
        <t>
          <list style="symbols">
            <t>Updated examples to reflect ietf-crypto-types change
              (e.g., identities --&gt; enumerations)</t>
            <t>Adjusting from change in TLS client model (removing the top-level
              'certificate' container).</t>
            <t>Added "external-endpoint" to the "http-listen" choice in ietf-restconf-server.</t>
          </list>
        </t>
      </section>
      <section title="14 to 15">
        <t>
          <list style="symbols">
            <t>Added missing "or https-listen" clause in a "must" expression.</t>
            <t>Refactored the client module similar to how the server module was refactored in -13.  Now
              the 'restconf-client-grouping' is just the RC-specific bits, the 
              'restconf-client-[initiate|listen]-stack-grouping' is the protocol
              stack for a single connection, and 'restconf-client-app-grouping' is effectively what
              was before (both listen+callhome for many inbound/outbound endpoints).</t>
          </list>
        </t>
      </section>
      <section title="15 to 16">
          <t>
            <list style="symbols">
              <t>Added refinement to make "cert-to-name/fingerprint" be mandatory false.</t>
              <t>Commented out refinement to "tls-server-grouping/client-authentication"
                until a better "must" expression is defined.</t>
              <t>Updated restconf-client example to reflect that http-client-grouping no
                longer has a "protocol-version" leaf.</t>
            </list>
          </t>
        </section>
        <section title="16 to 17">
          <t>
            <list style="symbols">
              <t>Updated examples to include the "*-key-format" nodes.</t>
              <t>Updated examples to remove the "required" nodes.</t>
            </list>
          </t>
        </section>
        <section title="17 to 18">
          <t>
            <list style="symbols">
              <t>Updated examples to reflect new "bag" addition to truststore.</t>
            </list>
          </t>
        </section>
        <section title="18 to 19">
          <t>
            <list style="symbols">
              <t>Updated examples to remove the 'algorithm' nodes.</t>
              <t>Updated examples to reflect the new TLS keepalives structure.</t>
              <t>Removed the 'protocol-versions' node from the restconf-server examples.</t>
              <t>Added a "Note to Reviewers" note to first page.</t>
            </list>
          </t>
        </section>
        <section title="19 to 20">
          <t>
            <list style="symbols">
              <t>Moved and changed "must" statement so that either TLS *or* HTTP auth must be configured.</t>
              <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
              <t>Updated the Security Considerations section.</t>
            </list>
          </t>
        </section>
        <section title="20 to 21">
          <t>
            <list style="symbols">
              <t>Cleaned up titles in the IANA Consideratons section</t>
              <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
            </list>
          </t>
        </section>
        <section title="21 to 22">
          <t>
            <list style="symbols">  
              <t>Addressed comments raised by YANG Doctor in the ct/ts/ks drafts.</t>
            </list>
          </t>
        </section>
        <section title="22 to 23">
          <t>
            <list style="symbols">  
              <t>Further clarified why some 'presence' statements are present.</t>
              <t>Addressed nits found in YANG Doctor reviews.</t>
              <t>Aligned modules with `pyang -f` formatting.</t>
            </list>
          </t>
        </section>
        <section title="23 to 24">
          <t>
            <list style="symbols">  
              <t>Removed Appendix A with fully-expanded tree diagrams.</t>
              <t>Replaced "base64encodedvalue==" with "BASE64VALUE=" in examples.</t>
              <t>Minor editorial nits</t>
            </list>
          </t>
        </section>
        <section title="24 to 25">
          <t>
            <list style="symbols">  
              <t>Fixed up the 'WG Web' and 'WG List' lines in YANG module(s)</t>
              <t>Fixed up copyright (i.e., s/Simplified/Revised/) in YANG module(s)</t>
            </list>
          </t>
        </section>
        <!--
        <section title="24 to 25">
          <t>
            <list style="symbols">  
              <t>SUBMISSION PENDING</t>
            </list>
          </t>
        </section>
        -->
    </section>

    <section title="Acknowledgements" numbered="no">
      <t>The authors would like to thank for following for
      lively discussions on list and in the halls (ordered
      by first name):
      Alan Luchuk,
      Andy Bierman,
      Balázs Kovács,
      Benoit Claise,
      Bert Wijnen
      David Lamparter,
      Juergen Schoenwaelder,
      Ladislav Lhotka,
      Martin Björklund,
      Mehmet Ersue,
      Phil Shafer,
      Radek Krejci,
      Ramkumar Dhanapal,
      Sean Turner,
      and Tom Petch.</t>
    </section>

  </back>
</rfc>

